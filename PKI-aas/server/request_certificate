#!/bin/bash 
set -eou pipefail

main() {

  # Generate private key for server and certificate signing request (CSR)
  if [ ! -f ./server.key ]; then
    openssl genrsa -out ./server.key 2048
    chmod 400 ./server.key
  fi

  # Generate CSR
  openssl req -new -sha256 \
        -subj "/C=US/ST=./L=./O=./CN=server" \
        -key ./server.key \
        -out ./server.csr

  # Authenticate with Conjur as a host
  encoded_login=$(urlencode "host/$MTLS_SERVER_LOGIN")
  token=$(curl -s \
		-X POST \
		--cacert "$CONJUR_CERT_FILE" \
		-d $CONJUR_AUTHN_API_KEY \
          	"$CONJUR_APPLIANCE_URL/authn/$CONJUR_ACCOUNT/$encoded_login/authenticate"  \
          | base64 | tr -d '\r\n')

  # Request a certificate from the CA configured in Conjur
  ca_response=$(curl -s \
		-X POST \
		--cacert "$CONJUR_CERT_FILE" \
		-d "ttl=P1D" \
		--data-urlencode "csr@./server.csr" \
                -H "Authorization: Token token=\"$token\"" \
                -H "Accept: application/x-pem-file" \
                "$CONJUR_APPLIANCE_URL/ca/$CONJUR_ACCOUNT/$CA_SERVICE_ID/sign")

#  echo "$ca_response"
  echo "$ca_response" > ./server.crt

}

urlencode() {
        local str=$1; shift
        str=$(echo $str | sed 's= =%20=g')
        str=$(echo $str | sed 's=/=%2F=g')
        str=$(echo $str | sed 's=:=%3A=g')
	echo $str
}

main "$@"
